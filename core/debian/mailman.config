#! /usr/bin/python
# $URL$
# $Id$

"""

Fooling lintian that complains about not sourcing confmodule:
. /usr/share/debconf/confmodule
"""

import sys, os

# Argl, if the debconf Python interface were well designed, sth like
#   from debconf import instance as db
# should be sufficient here.  As it is, must work around it's flaws.
def get_debconf_interface(title=''):
    """Get an debconf interface instance, starting a frontend if
    none is available.
    """#
    from debconf import Debconf, _frontEndProgram
    try:             junk = os.environ['DEBIAN_HAS_FRONTEND']
    except KeyError: os.execv(_frontEndProgram, [_frontEndProgram]+sys.argv)
    return Debconf(title)
db = get_debconf_interface() ; del get_debconf_interface
#  Exception class and convenience constants
from debconf import DebconfError, LOW, MEDIUM, HIGH, CRITICAL

mm_inst  = '/usr/lib/mailman'
mm_home  = '/var/lib/mailman'
mm_lists = os.path.join(mm_home, 'lists')
crontab  = '/etc/cron.d/mailman'


def gate_news_enabled():
    """Checks crontab if gate_news is enabled.

    Assume valid crontab(5) format: lines whose first non-space character
    is a # are comments, comments on command lines are disallowed.
    """
    cmd = 'grep gate_news %(crontab)s' % globals()
    gn = os.popen(cmd)
    result = False
    for line in gn.readlines():
        line = line.strip()
        log('GREPPING: %(line)r' % locals(), lvl=2)
        result |= line[0] != '#'
    if gn.close() is None:
        return result
    else:
        return False


def have_list(listname):
    """Check if a list with the specified internal name exists.

    When upgrading, use installed MM's own notion of list existence.
    On a first time install (or when MM has been removed prior to this
    installation, simply checks for directory existence.
    """#
    try:
        from Mailman.Utils import list_exists
        return list_exists(listname)
    except:
        list_dir = os.path.join(mm_lists, listname)
        return os.path.isdir(list_dir)


def main(operation, inst_version):


    db.fset('mailman/create_site_list', 'seen', 'false')

    def db_input(*args):
        try:
            db.input(*args)
        except DebconfError, exc:
            if exc.args[0] != 30:
                raise

    gbls = globals().copy()
    mm_cfg = '/etc/mailman/mm_cfg.py'

    if os.path.exists('/etc/mailname'):
        mailname = open('/etc/mailname')
    else:
        mailname = os.popen('hostname --fqdn')
    mailname = mailname.read().strip()

    if os.path.exists(mm_cfg):
        # At this point we can't assume a sensible Defaults.py is installed,
        # execute relevant assignments ignoring errors.
        for line in os.popen('egrep "^DEFAULT_[^ =]+ *=" %(mm_cfg)s' % locals()):
            try: exec line in gbls
            except: pass

    default_url_host   = gbls.get('DEFAULT_URL_HOST', None)
    default_email_host = gbls.get('DEFAULT_HOST_NAME',
                                  gbls.get('DEFAULT_EMAIL_HOST', mailname))

    if gbls.has_key('DEFAULT_URL'):
        from urlparse import urlsplit
        default_url          = gbls.get('DEFAULT_URL', None)
        if default_url:
            default_url_host = urlsplit(default_url)[1]

    if not default_url_host:
        default_url_host = default_email_host

    default_server_language  = gbls.get('DEFAULT_SERVER_LANGUAGE', 'en')

    db.set('mailman/url_host',   default_url_host)
    db_input(MEDIUM, 'mailman/url_host')

    db.set('mailman/email_host', default_email_host)
    db_input(MEDIUM, 'mailman/email_host')

    site_languages = db.get('mailman/site_languages')
    langs = site_languages.split(', ')
    if len(langs) > 1 and default_server_language not in langs:
        default_server_language = ''
    db.subst('mailman/default_server_language', 'site_languages', site_languages)
    db.set('mailman/default_server_language', default_server_language)
    db_input(HIGH, 'mailman/default_server_language')

    db.set('mailman/gate_news',
           gate_news_enabled() and 'true' or 'false')
    db_input(LOW, 'mailman/gate_news')

    site_list = 'mailman'
    if not have_list(site_list):
        db_input(CRITICAL, 'mailman/create_site_list')

    db.go()


if __name__ == '__main__':
    if len(sys.argv) == 2:
        operation, inst_version = sys.argv[1], None
    elif len(sys.argv) == 3:
        operation, inst_version = sys.argv[1:]

    def dummy_logger(*args, **kw):
        pass

    try:
        sys.path.insert(0, mm_inst)
        from Mailman.Debian import DebuggingLogger
        log = DebuggingLogger('MM_MAINT')
        try:
            main(operation, inst_version)
        finally:
            log.sys_info()
    except ImportError:
        log = dummy_logger
        main(operation, inst_version)
