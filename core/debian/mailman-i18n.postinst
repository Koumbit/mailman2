#!/usr/bin/python -O
#
# $URL$
# $Id$
#

"""
Fooling lintian that complains about not sourcing confmodule:
. /usr/share/debconf/confmodule
"""#


import sys, os


# Argl, if the debconf Python interface were well designed, sth like
#   from debconf import instance as db
# should be sufficient here.  As it is, must work around it's flaws.
def get_debconf_interface(title=''):
    """Get an debconf interface instance, starting a frontend if
    none is available.
    """#
    from debconf import Debconf, _frontEndProgram
    try:             junk = os.environ['DEBIAN_HAS_FRONTEND']
    except KeyError: os.execv(_frontEndProgram, [_frontEndProgram]+sys.argv)
    return Debconf(title)
db = get_debconf_interface() ; del get_debconf_interface
#  Exception class and convenience constants
from debconf import DebconfError, LOW, MEDIUM, HIGH, CRITICAL

PACKAGE='mailman-i18n'
MM_INST = '/usr/lib/mailman'

# mailman (and thus the Mailman py package) may not be installed yet
sys.path.insert(0, os.path.join(MM_INST, 'Mailman'))
from Debian import DebuggingLogger, cfdb, mm_languages


def start_mm_qrunner():
    from popen2 import Popen4
    runner = Popen4('/bin/sh -e')
    runner.tochild.write("""\
if [ -x "/etc/init.d/mailman" ]; then
  if [ -x /usr/sbin/invoke-rc.d ] ; then
    invoke-rc.d mailman reload || true
  else
    /etc/init.d/mailman reload || true
  fi
fi
""")
    runner.tochild.close()
    while True:
        rc = runner.poll()
        if rc != -1: break
        log(runner.fromchild.readline(), nl='')
    log(runner.fromchild.read(), nl='')
    if rc != 0:
        raise SystemExit(1)


if __name__ == '__main__':
    log = DebuggingLogger('MM_MAINT')
    try:
        op = sys.argv[1]
        if op in ('configure','abort-upgrade','abort-remove','abort-deconfigure'):
            start_mm_qrunner()
        else:
            log("postinst called with unknown argument %r." % op)
            raise SystemExit(1)
    finally:
        # When things break, this information might be useful
        log.sys_info()
